/*************************************************************************************/
/*         链栈基本操作函数
/*------------------------------------------------------------------------------------
/*
/*
/* Date: 2016-10-16
/************************************************************************************/

#include <stdio.h>
#include <malloc.h>

typedef char ElemType;

//--------------------------------------------------------
//  链栈类型定义
//--------------------------------------------------------
typedef struct linknode
{
    ElemType data;                /*数据域*/
    struct linknode *next;        /*指针域*/
} LiStack;                        /*链栈类型定义*/

//========================================================
// 初始化链栈
//========================================================
void InitStack(LiStack *&s)
{
    s=(LiStack *)malloc(sizeof(LiStack));
    s->next=NULL;
}

//========================================================
// 销毁链栈
//========================================================
void ClearStack(LiStack *&s)
{
    LiStack *p=s->next;
    while (p!=NULL)
    {
        free(s);
        s=p;
        p=p->next;
    }
    free(s);    /*s指向尾结点,释放其空间*/
}

//========================================================
// 求链栈的长度
//========================================================
int StackLength(LiStack *s)
{
    int i=0;
    LiStack *p;
    p=s->next;
    while (p!=NULL)
    {    
        i++;
        p=p->next;
    }

    return(i);
}

//========================================================
// 判断链栈是否为空
//========================================================
int StackEmpty(LiStack *s)
{
    return(s->next==NULL);
}

//========================================================
// 元素进栈
//========================================================
void Push(LiStack *&s, ElemType e)
{
    LiStack *p;
    p=(LiStack *)malloc(sizeof(LiStack));
    p->data=e;
    p->next=s->next;        /*插入*p结点作为第一个数据结点*/
    s->next=p;
}

//========================================================
// 元素出栈
//========================================================
int Pop(LiStack *&s, ElemType &e)
{
    LiStack *p;
    if (s->next==NULL)        /*栈空的情况*/
        return 0;
    p=s->next;                /*p指向第一个数据结点*/
    e=p->data;
    s->next=p->next;
    free(p);
    return 1;
}

//========================================================
// 取栈顶元素
//========================================================
int GetTop(LiStack *s,ElemType &e)
{
    if (s->next==NULL)        /*栈空的情况*/
        return 0;
    e=s->next->data;
    return 1;
}

//========================================================
// 显示栈中元素
//========================================================
void DispStack(LiStack *s)
{
    LiStack *p=s->next;
    while (p!=NULL)
    {    
        printf("%c ",p->data);
        p=p->next;
    }
    printf("\n");
}