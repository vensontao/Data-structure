/*************************************************************************************/
/*         顺序队列基本操作函数
/*------------------------------------------------------------------------------------
/*
/*
/* Date: 2016-10-16
/************************************************************************************/

#include <stdio.h>
#include <malloc.h>

#define MaxSize 100

typedef char ElemType;

//--------------------------------------------------------
//  顺序队列类型定义
//--------------------------------------------------------
typedef struct 
{
    ElemType data[MaxSize];
    int front,rear;          /*队首和队尾指针*/
} SqQueue;

//========================================================
// 初始化顺序队列
//========================================================
void InitQueue(SqQueue *&q)
{
    q=(SqQueue *)malloc(sizeof(SqQueue));
    q->front=0；
    q->rear=0;
}

//========================================================
// 销毁顺序队列
//========================================================
void ClearQueue(SqQueue *&q)
{
    free(q);
}

//========================================================
// 判断顺序队列是否为空
//========================================================
int QueueEmpty(SqQueue *q)
{
    return(q->front==q->rear);
}

//========================================================
// 入顺序队列
//========================================================
int enQueue(SqQueue *&q,ElemType e)
{
    if ((q->rear+1)%MaxSize==q->front)  /*队满判断条件*/
        return 0;

    q->rear=(q->rear+1)%MaxSize;
    q->data[q->rear]=e;
    return 1;
}

//========================================================
// 出顺序队列
//========================================================
int deQueue(SqQueue *&q,ElemType &e)
{
    if (q->front==q->rear)             /*队空判断条件*/
        return 0;

    q->front=(q->front+1)%MaxSize;
    e=q->data[q->front];
    return 1;
}