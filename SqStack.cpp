/*************************************************************************************/
/*         顺序栈基本操作函数
/*------------------------------------------------------------------------------------
/*
/*
/* Date: 2016-10-16
/************************************************************************************/

#include <stdio.h>
#include <malloc.h>

#define MaxSize 100

typedef char ElemType;

//--------------------------------------------------------
//  顺序栈类型定义
//--------------------------------------------------------
typedef struct 
{
    ElemType data[MaxSize];
    int top;                  /*栈指针*/
} SqStack;

//========================================================
// 初始化顺序栈
//========================================================
void InitStack(SqStack *&s)
{
    s=(SqStack *)malloc(sizeof(SqStack));
    s->top=-1;
} 

//========================================================
// 销毁顺序栈
//========================================================
void ClearStack(SqStack *&s)
{
    free(s);
}

//========================================================
// 求顺序栈的长度
//========================================================
int StackLength(SqStack *s)
{
    return(s->top+1);
}

//========================================================
// 判断顺序栈是否为空
//========================================================
int StackEmpty(SqStack *s)
{
    return(s->top==-1);
}

//========================================================
// 元素进栈
//========================================================
int Push(SqStack *&s,ElemType e)
{
    if (s->top==MaxSize-1)    /*栈满的情况，即栈上溢出*/
        return 0;
    s->top++;
    s->data[s->top]=e;
    return 1;
}

//========================================================
// 元素出栈
//========================================================
int Pop(SqStack *&s,ElemType &e)
{
    if (s->top==-1)        /*栈为空的情况，即栈下溢出*/
        return 0;
    e=s->data[s->top];
    s->top--;
    return 1;
}

//========================================================
// 取栈顶元素
//========================================================
int GetTop(SqStack *s,ElemType &e)
{
    if (s->top==-1)         /*栈为空的情况，即栈下溢出*/
        return 0;
    e=s->data[s->top];
    return 1;
}

//========================================================
// 显示栈中元素
//========================================================
void DispStack(SqStack *s)
{
    int i;
    for (i=s->top;i>=0;i--)
        printf("%c ",s->data[i]);
    printf("\n");
}
